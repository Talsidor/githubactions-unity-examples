# A Unity Build and Steam Deploy workflow that also sends notification messages to Discord!
# This is an advanced workflow: To better understand how GitHub Actions works, make sure to check out simple.yml first.

# Pipeline name
name: Unity Build Pipeline (Discord Notifications)

# ============== #
# GitHub Actions #
# Events         # https://docs.github.com/en/actions/get-started/understand-github-actions#events
# ============== #
# What events should trigger this action? We've specified the 'push' event, which means this action will trigger on each Git Push
on: [push]

# ===================== #
# Environment Variables #
# ===================== #
env:
    # Generates an auto-incrementing build number (e.g. "1.23.1")
    SEMVER: "1.${{ github.run_number }}.${{ github.run_attempt }}"

    # URL pointing to this build run - useful to insert into notifications!
    JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    # Where is the Unity editor install located on the build machine?
    # (This path variable is double-quoted so the inner quotes are kept as part of the value, because the path is likely to contain spaces.)
    # !! ACTION REQUIRED - Change this to YOUR install path!
    EDITOR_PATH: '"C:/Program Files/Unity/Hub/Editor/6000.0.49f1/Editor/Unity.exe"'

    # Where is the Steam SDK install located? Should end in '/steamworks_sdk/sdk'
    # !! ACTION REQUIRED - Change this to YOUR install path!
    STEAM_PATH: 'C:\steamworks_sdk\sdk'

    # This is what the build's folder and executable files will be named (e.g. game.exe / game.app / game.x86_64)
    # !! ACTION REQUIRED - Change this to YOUR game name!
    GAME_NAME: 'game'

    # URL of Discord webhook to use for notifications
    # !! ACTION REQUIRED - Change this to YOUR webhook URL!
    DISCORD_WEBHOOK_URL: "https://discord.com/api/webhooks/******/"

# ==== #
# Jobs # https://docs.github.com/en/actions/get-started/understand-github-actions#jobs
# ==== #
jobs:

  # =========== #
  #  NOTIFY JOB #
  # =========== #

  notify-start:
    name: Notify Start
    runs-on: [self-hosted, lite]
    steps:
      
      # Post 'build starting' message to Discord
      # These steps use Curl to send HTTP requests, you can learn more about Curl here:
      - name: Curl build start message to Discord
        run: |
          $MSG="## :construction_worker: ${{ env.GAME_NAME }} v``${{ env.SEMVER }}`` build starting! \n -# Job URL: ${{ env.JOB_URL }}"
          
          $CurlArguments = '-i', 
                           '-H', 'Accept: application/json',
                           '-H', 'Content-Type: application/json',
                           '-X', 'POST',
                           '-d', "{""content"": ""$MSG""}",
                           "$env:DISCORD_WEBHOOK_URL"
                          
          & curl.exe @CurlArguments

      # Post 'head commit details' message to Discord
      # NB: I've made this a separate webhook call as the use of some characters in the commit message will break string parsing of the Curl invocation. If you find an elegant solution to prevent this feel free to let me know :) 
      - name: Curl git commit details to Discord
        run: |
          $MSG="### :page_with_curl: Head Git commit for build ``${{ env.SEMVER }}`` \n - Author Name: ``${{ github.event.head_commit.author.name }}`` \n - SHA: ``${{ github.event.head_commit.id }}`` \n - Message: ``${{ github.event.head_commit.message }}``"
          
          $CurlArguments = '-i', 
                           '-H', 'Accept: application/json',
                           '-H', 'Content-Type: application/json',
                           '-X', 'POST',
                           '-d', "{""content"": ""$MSG""}",
                           "$env:DISCORD_WEBHOOK_URL"
          
          & curl.exe @CurlArguments
          
# ========= #
# BUILD JOB #
# ========= #

  build-win:
    name: Build Win64
    # This job can only run on Runners that have all these tags
    runs-on: [self-hosted, build-win]
    env:
      # What is the Unity BuildTarget value for this build? 
      # See: https://docs.unity3d.com/ScriptReference/BuildTarget.html
      TARGET_PLATFORM: StandaloneWindows64

    # Build steps
    steps:

      # ============ #
      #   Checkout   #
      # ============ #
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
          clean: false
      
      # ========= #
      #   Build   #
      # ========= #
      
      - name: Build Win64
        id: buildStep
        run: |
          & ${{ env.EDITOR_PATH }} -batchmode -projectPath "./" -timestamps -quit -buildWindows64Player "../build/${{ env.TARGET_PLATFORM }}/${{ env.GAME_NAME }}/${{ env.GAME_NAME }}.exe" -logFile - -executeMethod BuildScript.SetVersionNumberFromArg -buildVersion "${{ env.SEMVER }}" | Tee-Object -FilePath '../output.txt'

      # ================= #
      # Prepare for Steam #
      # ================= #
      
      - name: Copy build to Steamworks upload directory
        run: |
          # Create a variable which points to the Steam SDK's Windows content path (the destination folder)
          $dest = "${{ env.STEAM_PATH }}\tools\ContentBuilder\content\win\"

          # Clear existing files in the destination folder
          Remove-Item -Path "$dest*" -Recurse -Force

          # Copy new build to the destination folder
          cp "../build/${{ env.TARGET_PLATFORM }}/outpost/*" $dest -r

          # Remove the _DoNotShip folder from the copied build, if it exists
          Remove-Item -Path "$dest/${{ env.GAME_NAME }}_BurstDebugInformation_DoNotShip" -Recurse -Force

      # =============== #
      # Deploy to Steam #
      # =============== #
      
      # When we invoke Steam Builder, we pass SEMVER as an argument, so Steam can associate each build with its version number
      - name: Deploy via Steamworks SDK 
        run: |
          & "${{ env.STEAM_PATH }}\tools\ContentBuilder\builder\steamcmd.exe" +login YourSteamAccountName +run_app_build -desc ${{ env.SEMVER }} "..\scripts\simple_app_build.vdf" +quit

      # ======================== #
      # Report result to Discord #
      # ======================== #
      
      # On success: Post success message to Discord
      - name: Curl success message to Discord
        if: success()
        continue-on-error: true
        # https://stackoverflow.com/a/62301184
        # e.g. Build 0.1.295.1 for StandaloneWindows64 was successful!
        run: |
          $MSG = "## :tada: Build ``${{ env.SEMVER }}`` for ``${{ env.TARGET_PLATFORM }}`` was successful! \n -# Job URL: ${{ env.JOB_URL }}"
          
          $CurlArguments = '-i', 
                           '-H', 'Accept: application/json',
                           '-H', 'Content-Type: application/json',
                           '-X', 'POST',
                           '-d', "{""content"": ""$MSG""}",
                           "$env:DISCORD_WEBHOOK_URL"
                           
          & curl.exe @CurlArguments
          
      # On failure: Post failed message to Discord
      - name: Curl failure message to Discord
        if: failure()
        continue-on-error: true
        run: |
          $MSG = "## :x: Build ``${{ env.SEMVER }}`` for ``${{ env.TARGET_PLATFORM }}`` was unsuccessful :( \n _See logs available at the Job URL below for more details_ \n -# Job URL: ${{ env.JOB_URL }}"
          
          $CurlArguments = '-i', 
                           '-H', 'Accept: application/json',
                           '-H', 'Content-Type: application/json',
                           '-X', 'POST',
                           '-d', "{""content"": ""$MSG""}",
                           "$env:DISCORD_WEBHOOK_URL"
                           
          & curl.exe @CurlArguments
